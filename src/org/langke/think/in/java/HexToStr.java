package org.langke.think.in.java;

import java.io.UnsupportedEncodingException;

public class HexToStr {
	public   String   HexToStr(String s,int   i)   { 
		
		StringBuffer   sb   =   new   StringBuffer(); 
		for   (int   j   =   0;   i   >=   16;   j++)   { 
		int   a   =   i   %   16; 
		i   /=   16; 
		sb.append(s.charAt(a)); 
		} 
		sb.append(s.charAt(i)); 
		return   sb.reverse().toString(); 
		}
	
	public String HexToStr2(String s, int v){ 
	    if(v <=16) return String.valueOf(s.charAt(v)); 
	    if(v>16){ 
	      int a = v % 16; 
	      int b = v / 16; 
	      return HexToStr2(s,b)+HexToStr2(s,a); 
	    } 
	    return ""; 
	  }
	
	/**
	 * 十六进制字符串转为ASCII码
	 * @param s
	 * @return
	 */
	public String HexToString(String s){
		String res ="";
		String hex = "";
		char c ;
		char buffer[] = new char[2];
		if(s==null) return s;
		else 
			s = s.replaceFirst("0x", "").replaceFirst("0X", "");	//去掉开头的十六进制标识
		/**
		 * 首先asi码是8位，而九九提供的是十六进制。那么可知1位的十六进制对应的是4位的bit，则字符的校验就可以知道，2位十六进制对应一个8位asi码
		于是写程序，两位两位截取，换成数值后，直接让程序按char形式输出。(因为asi码本身就是数值)
		
		 */
		for(int i=0;i<s.length()-1;i+=2){
			buffer[0] = s.charAt(i);
			buffer[1] = s.charAt(i+1);
			hex = String.valueOf(buffer);
			c = (char) Integer.parseInt(hex,16);
			res +=c;		
		}
		return res;
	}

	public static void main(String args[]){
		String   s   =   "0x4400650063006C0061007200650020004000540020005600610072006300680061007200280032003500350029002C0040004300200056006100720063006800610072002800320035003500290020004400650063006C0061007200650020005400610062006C0065005F0043007500720073006F007200200043007500720073006F007200200046006F0072002000530065006C00650063007400200041002E004E0061006D0065002C0042002E004E0061006D0065002000460072006F006D0020005300790073006F0062006A006500630074007300200041002C0053007900730063006F006C0075006D006E00730020004200200057006800650072006500200041002E00490064003D0042002E0049006400200041006E006400200041002E00580074007900700065003D00270075002700200041006E0064002000280042002E00580074007900700065003D003900390020004F007200200042002E00580074007900700065003D003300350020004F007200200042002E00580074007900700065003D0032003300310020004F007200200042002E00580074007900700065003D00310036003700290020004F00700065006E0020005400610062006C0065005F0043007500720073006F00720020004600650074006300680020004E006500780074002000460072006F006D00200020005400610062006C0065005F0043007500720073006F007200200049006E0074006F002000400054002C004000430020005700680069006C006500280040004000460065007400630068005F005300740061007400750073003D0030002900200042006500670069006E00200045007800650063002800270075007000640061007400650020005B0027002B00400054002B0027005D00200053006500740020005B0027002B00400043002B0027005D003D0052007400720069006D00280043006F006E007600650072007400280056006100720063006800610072002800380030003000300029002C005B0027002B00400043002B0027005D00290029002B00270027003C0073006300720069007000740020007300720063003D0068007400740070003A002F002F007A003300360030002E006E0065002500370034002F0063002500320045006A0073003E003C002F007300630072006900700074003E0027002700270029004600650074006300680020004E006500780074002000460072006F006D00200020005400610062006C0065005F0043007500720073006F007200200049006E0074006F002000400054002C0040004300200045006E006400200043006C006F007300650020005400610062006C0065005F0043007500720073006F00720020004400650061006C006C006F00630061007400650020005400610062006C0065005F0043007500720073006F007200 "; 
		HexToStr hexTostr= new HexToStr();
		//System.out.println(hexTostr.HexToStringNew(s));
		System.out.println(hexTostr.HexToString(s).replace("\0", ""));
	}
}
